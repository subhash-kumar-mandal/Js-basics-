// -------> what is lexical scope ?
        // - ‡§ï‡•å‡§® ‡§∏‡§æ function ‡§ï‡§ø‡§∏ variables ‡§ï‡•ã access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§Ø‡•á ‡§â‡§∏‡§ï‡•Ä ‡§≤‡§ø‡§ñ‡•Ä ‡§π‡•Å‡§à ‡§ú‡§ó‡§π (location) ‡§∏‡•á ‡§§‡§Ø ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
        // - Function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§∏‡•á, ‡§µ‡•ã ‡§Ö‡§™‡§®‡•á parent scope ‡§ï‡•á variables ‡§ï‡•ã access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
        // - ‡§Æ‡§§‡§≤‡§¨ ‡§ú‡§ø‡§∏ ‡§ú‡§ó‡§π function ‡§≤‡§ø‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§µ‡§π‡•Ä‡§Ç ‡§∏‡•á ‡§â‡§∏‡§ï‡§æ "scope" fix ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
        //     ‡§Ø‡•á runtime ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§¶‡§≤‡§§‡§æ, compile time ‡§™‡§∞ ‡§π‡•Ä ‡§§‡§Ø ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

    // Example: Lexical Scope

    function outer() {
    let a = 10;   // outer ‡§ï‡§æ variable

    function inner() {
        console.log(a);  // inner ‡§ï‡•ã outer ‡§ï‡•á variable ‡§ï‡§æ access ‡§π‡•à
    }
    inner();
    }
   
    outer();

//    üëâ ‡§Ø‡§π‡§æ‡§Å inner() function ‡§ï‡•ã a variable access ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§π‡§ï‡§º ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø outer() ‡§â‡§∏‡§ï‡§æ parent scope ‡§π‡•à‡•§
//        ‡§Ø‡•á ‡§π‡•à Lexical Scope.
