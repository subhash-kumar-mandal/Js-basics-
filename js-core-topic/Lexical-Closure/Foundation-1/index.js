// -------> what is lexical scope ?
        // - ‡§ï‡•å‡§® ‡§∏‡§æ function ‡§ï‡§ø‡§∏ variables ‡§ï‡•ã access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§Ø‡•á ‡§â‡§∏‡§ï‡•Ä ‡§≤‡§ø‡§ñ‡•Ä ‡§π‡•Å‡§à ‡§ú‡§ó‡§π (location) ‡§∏‡•á ‡§§‡§Ø ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§
        // - Function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§∏‡•á, ‡§µ‡•ã ‡§Ö‡§™‡§®‡•á parent scope ‡§ï‡•á variables ‡§ï‡•ã access ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
        // - ‡§Æ‡§§‡§≤‡§¨ ‡§ú‡§ø‡§∏ ‡§ú‡§ó‡§π function ‡§≤‡§ø‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à, ‡§µ‡§π‡•Ä‡§Ç ‡§∏‡•á ‡§â‡§∏‡§ï‡§æ "scope" fix ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§
        //     ‡§Ø‡•á runtime ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§¶‡§≤‡§§‡§æ, compile time ‡§™‡§∞ ‡§π‡•Ä ‡§§‡§Ø ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

    // Example: Lexical Scope

    function oute() {
    let a = 10;   // outer ‡§ï‡§æ variable

    function inner() {
        console.log(a);  // inner ‡§ï‡•ã outer ‡§ï‡•á variable ‡§ï‡§æ access ‡§π‡•à
    }
    inner();
    }
   
    oute();

//    üëâ ‡§Ø‡§π‡§æ‡§Å inner() function ‡§ï‡•ã a variable access ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§π‡§ï‡§º ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø outer() ‡§â‡§∏‡§ï‡§æ parent scope ‡§π‡•à‡•§
//        ‡§Ø‡•á ‡§π‡•à Lexical Scope.






// -------------> what is closure ?
        //   - ‡§ú‡§¨ ‡§ï‡•ã‡§à inner function, ‡§Ö‡§™‡§®‡•á parent function ‡§ï‡•á variables ‡§ï‡•ã use ‡§ï‡§∞‡§§‡§æ ‡§π‡•à,‡§î‡§∞ parent function 
        //     ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§≠‡•Ä ‡§µ‡•ã variables ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§§‡§æ ‡§π‡•à,‡§§‡•ã ‡§â‡§∏ situation ‡§ï‡•ã ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç Closure‡•§
        //   - ‡§î‡§∞ parent function execute ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§≠‡•Ä ‡§µ‡•ã variables ‡§Ø‡§æ‡§¶ ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç


    // Example: Closure 
    function outer() {
    let counter = 0;

    function inner() {
        counter++;
        console.log(counter);
    }

    return inner;
}

let fn = outer();  // outer call ‡§π‡•Å‡§Ü, fn = inner
fn();  // 1
fn();  // 2
fn();  // 3


        // 1. outer() call ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ normally ‡§â‡§∏‡§ï‡§æ variable counter ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§
        // 2. ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø inner() ‡§â‡§∏ counter ‡§ï‡•ã use ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à, JS ‡§â‡§∏‡•á "remember" ‡§ï‡§∞‡§ï‡•á ‡§∞‡§ñ‡§§‡•Ä ‡§π‡•à‡•§
        // 3. ‡§á‡§∏‡•Ä ‡§ï‡•ã ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç Closure ‚Üí function + ‡§â‡§∏‡§ï‡•á ‡§Ü‡§∏‡§™‡§æ‡§∏ ‡§ï‡§æ environment (variables)‡•§
